--- _examples/foo/foo.go	2022-11-14 11:59:06.000000000 +0900
+++ _examples/foo_transformed/foo.go	2022-11-14 12:30:17.000000000 +0900
@@ -2,20 +2,18 @@
 
 import (
 	"fmt"
-
-	"github.com/pkg/errors"
 )
 
 func Foo() error {
 	if err := Bar(); err != nil {
-		return errors.Wrap(err, "foo --")
+		return fmt.Errorf("foo -- %w", err)
 	}
 	return nil
 }
 
 func Bar() error {
 	if err := Boo(); err != nil {
-		return errors.Wrapf(err, "on %s%d", "bar", 0)
+		return fmt.Errorf("on %s%d -- %w", "bar", 0, err)
 	}
 	return nil
 }
@@ -25,7 +23,7 @@
 
 func Multiples() (bool, error) {
 	if err := Bar(); err != nil {
-		return false, errors.Wrap(err, "multiples")
+		return false, fmt.Errorf("multiples -- %w", err)
 	}
 	return true, nil
 }
@@ -42,31 +40,31 @@
 		fmt.Println("hmm")
 		return err
 	}
-	return newXXXError(errors.Wrap(Boo(), "hmm"))
+	return newXXXError(fmt.Errorf("hmm -- %w", Boo()))
 }
 func Paren() error {
 	if err := Boo(); err != nil {
-		return (errors.Wrapf(err, "on %s%d", "bar", 0))
+		return (fmt.Errorf("on %s%d -- %w", "bar", 0, err))
 	}
 	return nil
 }
 func Assign() error {
 	if err := Boo(); err != nil {
-		err = errors.Wrapf(err, "on %s%d", "bar", 0)
+		err = fmt.Errorf("on %s%d -- %w", "bar", 0, err)
 		return err
 	}
 	return nil
 }
 func Assign2() error {
 	if err := Boo(); err != nil {
-		err2 := errors.Wrapf(err, "on %s%d", "bar", 0)
+		err2 := fmt.Errorf("on %s%d -- %w", "bar", 0, err)
 		return err2
 	}
 	return nil
 }
 func Call() error {
 	if err := Boo(); err != nil {
-		fmt.Printf("!!%sn", errors.Wrapf(err, "on %s%d", "bar", 0).Error())
+		fmt.Printf("!!%sn", fmt.Errorf("on %s%d -- %w", "bar", 0, err).Error())
 		return nil
 	}
 	return nil
@@ -74,39 +72,39 @@
 
 func WithSprintf() error {
 	if err := Bar(); err != nil {
-		return errors.Wrap(err, fmt.Sprintf("error message with sprintf %d", 0))
+		return fmt.Errorf(fmt.Sprintf("error message with sprintf %d", 0)+" -- %w", err)
 	}
 	return nil
 }
 
 func WithWithMessage() error {
 	if err := Bar(); err != nil {
-		return errors.WithMessage(err, "multiples")
+		return fmt.Errorf("multiples -- %w", err)
 	}
 	return nil
 }
 
 func WithWithStack() error {
 	if err := Bar(); err != nil {
-		return errors.WithStack(err)
+		return err
 	}
 	return nil
 }
 
-var errSuspend = errors.New("suspend")
+var errSuspend = fmt.Errorf("suspend")
 
 func WithNew() error {
 	if err := Bar(); err != nil {
-		return errors.WithStack(errSuspend)
+		return errSuspend
 	}
-	return errors.New("hmm")
+	return fmt.Errorf("hmm")
 }
 
-var errSuspend2 = errors.Errorf("suspend %d", 2)
+var errSuspend2 = fmt.Errorf("suspend %d", 2)
 
 func WithErrorf() error {
 	if err := Bar(); err != nil {
-		return errors.WithStack(errSuspend)
+		return errSuspend
 	}
-	return errors.Errorf("hmm %d", 2)
+	return fmt.Errorf("hmm %d", 2)
 }
